%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Jul 19 16:14:15 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCCGUGGCGCAGUGGAAGCGCGCAGGGCUCAUAACCCUGAUGUCCUCGGAUCGAAACCGAGCGGCGCUA\
) } def
/len { sequence length } bind def

/coor [
[111.47455597 225.62422180]
[110.82922363 210.63810730]
[110.18389130 195.65200806]
[109.53855896 180.66589355]
[108.89322662 165.67977905]
[108.24788666 150.69366455]
[107.60255432 135.70755005]
[90.82699585 133.52299500]
[77.65003967 124.28301239]
[70.64385986 110.71425629]
[55.73059082 112.32497406]
[40.81732178 113.93569183]
[25.90405273 115.54641724]
[17.34772873 128.63546753]
[2.36483908 133.11285400]
[-11.97015381 126.86450195]
[-18.88870430 112.84067535]
[-15.12408638 97.66300201]
[-2.45383477 88.49792480]
[13.13954353 89.67289734]
[24.29333305 100.63314819]
[39.20660019 99.02242279]
[54.11986923 97.41170502]
[69.03313446 95.80098724]
[74.63919830 81.74053192]
[86.19539642 71.96411133]
[82.99258423 57.31003189]
[79.78977203 42.65595627]
[76.58695221 28.00187683]
[73.38414001 13.34779930]
[59.45198059 6.24646950]
[53.39159393 -8.16899967]
[58.06451416 -23.09206390]
[71.26432800 -31.47650719]
[86.75849152 -29.36345482]
[97.23112488 -17.75062370]
[97.73738098 -2.12123680]
[88.03821564 10.14498615]
[91.24103546 24.79906273]
[94.44384766 39.45314026]
[97.64665985 54.10721970]
[100.84947205 68.76129913]
[110.41574860 69.60877991]
[119.52779388 73.39453888]
[127.28234863 79.91354370]
[132.86143494 88.68358612]
[135.61701965 98.97901154]
[135.14274597 109.89015961]
[150.05601501 111.50087738]
[164.96928406 113.11160278]
[179.88255310 114.72232056]
[194.79582214 116.33303833]
[205.94961548 105.37279510]
[221.54299927 104.19782257]
[234.21324158 113.36289978]
[237.97785950 128.54057312]
[231.05931091 142.56439209]
[216.72431946 148.81275940]
[201.74142456 144.33535767]
[193.18510437 131.24630737]
[178.27183533 129.63558960]
[163.35856628 128.02487183]
[148.44529724 126.41414642]
[133.53202820 124.80342865]
[122.58866882 135.06222534]
[123.23400116 150.04833984]
[123.87933350 165.03443909]
[124.52466583 180.02055359]
[125.17000580 195.00666809]
[125.81533813 209.99278259]
[126.46067047 224.97889709]
[129.47798157 244.12428284]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[4 68]
[5 67]
[6 66]
[7 65]
[10 24]
[11 23]
[12 22]
[13 21]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
